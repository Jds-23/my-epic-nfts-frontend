{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","CONTRACT_ADDRESS","App","useState","currentAccount","setCurrentAccount","networkId","setNetworkId","nftMinted","setNftMinted","minting","setMinting","checkIfWalletIsConnected","a","window","ethereum","console","log","getTotalNFTsMintedSoFar","request","method","accounts","length","account","parseInt","chainId","on","useEffect","connectWallet","alert","setupEventListener","provider","ethers","providers","Web3Provider","signer","getSigner","Contract","myEpicNft","abi","from","tokenId","toNumber","error","askContractToMintNft","connectedContract","makeAnEpicNFT","nftTxn","wait","hash","nftMintedSoFar","className","style","fontSize","onClick","disabled","href","target","rel","alt","src","twitterLogo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9abd6ab8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import \"./styles/App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport myEpicNft from \"./utils/MyEpicNFT.json\";\n// Constants\nconst TWITTER_HANDLE = \"_buildspace\";\nconst MY_TWITTER_HANDLE = \"JoydeepSingha7\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TOTAL_MINT_COUNT = 50;\nconst CONTRACT_ADDRESS = \"0x41e636803f1FB05AFac672Fb7efa5a611cC4170c\";\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [networkId, setNetworkId] = useState();\n  const [nftMinted, setNftMinted] = useState();\n  const [minting, setMinting] = useState(false);\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n    getTotalNFTsMintedSoFar();\n\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n    if (ethereum) setNetworkId(parseInt(ethereum.chainId, 16));\n    ethereum.on(\"chainChanged\", (chainId) => {\n      console.log(chainId);\n      setNetworkId(parseInt(chainId, 16));\n    });\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [checkIfWalletIsConnected]);\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <button\n      onClick={connectWallet}\n      className=\"cta-button connect-wallet-button\"\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderMintUI = () => (\n    <button\n      onClick={askContractToMintNft}\n      disabled={networkId !== 4}\n      className=\"cta-button connect-wallet-button\"\n    >\n      {networkId !== 4\n        ? \"Wrong Network! Switch to Rinkeby.\"\n        : minting\n        ? \"Minting...\"\n        : \"Mint NFT\"}\n    </button>\n  );\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          myEpicNft.abi,\n          signer\n        );\n\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          setNftMinted(tokenId.toNumber() + 1);\n          alert(\n            `Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\n          );\n        });\n\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const askContractToMintNft = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          myEpicNft.abi,\n          signer\n        );\n\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        setMinting(true);\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n        setMinting(false);\n        alert(\n          `Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`\n        );\n        console.log(\n          `Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`\n        );\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const getTotalNFTsMintedSoFar = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          myEpicNft.abi,\n          signer\n        );\n        const tokenId = await connectedContract.nftMintedSoFar();\n        console.log(tokenId);\n        setNftMinted(tokenId.toNumber() + 1);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">Jds's NFT Collection</p>\n          <p className=\"sub-text\" style={{ fontSize: \"16px\" }}>\n            NFT minted so far {nftMinted}/{TOTAL_MINT_COUNT}\n          </p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          {currentAccount === \"\"\n            ? renderNotConnectedContainer()\n            : renderMintUI()}{\" \"}\n        </div>\n        <div className=\"footer-container\">\n          <a\n            className=\"footer-text\"\n            href={`https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}`}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`🌊 View Collection on OpenSea`}</a>\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${MY_TWITTER_HANDLE}`}</a>\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}